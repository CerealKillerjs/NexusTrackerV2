generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String               @id @default(cuid())
  username            String               @unique
  name                String?
  email               String               @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  passkey             String               @unique @default(cuid())
  role                String               @default("USER")
  status              UserStatus           @default(ACTIVE)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  uploaded            BigInt               @default(0)
  downloaded          BigInt               @default(0)
  ratio               Float                @default(0)
  bonusPoints         Int                  @default(0)
  availableInvites    Int                  @default(0)
  accounts            Account[]
  peers               Peer[]
  Progress            Progress[]
  sessions            Session[]
  torrentCompletions  TorrentCompletion[]
  announceRateLimits  AnnounceRateLimit[]
  hitAndRuns          HitAndRun[]
  bookmarks           Bookmark[]
  comments            Comment[]
  createdInvites      InviteCode[]         @relation("CreatedInvites")
  usedInvite          InviteCode?          @relation("UsedInvite")
  passwordResetTokens PasswordResetToken[]
  torrents            Torrent[]
  votes               Vote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model Torrent {
  id                 String              @id @default(cuid())
  infoHash           String              @unique
  name               String
  description        String?
  type               String?
  source             String?
  binary             String
  uploadedBy         String
  downloads          Int                 @default(0)
  size               BigInt
  files              Json
  image              String?
  nfo                String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  freeleech          Boolean             @default(false)
  tags               String[]
  anonymous          Boolean             @default(false)
  peers              Peer[]
  torrentCompletions TorrentCompletion[]
  announceRateLimits AnnounceRateLimit[]
  hitAndRuns         HitAndRun[]
  bookmarks          Bookmark[]
  comments           Comment[]
  user               User                @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  votes              Vote[]

  @@map("torrents")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  torrentId String?
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  torrent   Torrent? @relation(fields: [torrentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes     Vote[]
  parent    Comment? @relation("CommentToReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentToReplies")

  @@map("comments")
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  torrentId String?
  commentId String?
  type      String
  createdAt DateTime @default(now())
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  torrent   Torrent? @relation(fields: [torrentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, torrentId, type])
  @@unique([userId, commentId, type])
  @@map("votes")
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  torrentId String
  createdAt DateTime @default(now())
  torrent   Torrent  @relation(fields: [torrentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, torrentId])
  @@map("bookmarks")
}

model Configuration {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt
}

// Configuración para el sistema de hit and run basado en tiempo de seeding
// REQUIRED_SEEDING_MINUTES: Tiempo mínimo de seeding en minutos (default: 4320 = 72 horas)
// HIT_AND_RUN_THRESHOLD: Número máximo de hit and runs permitidos (default: 5)

model InviteCode {
  id        String    @id @default(cuid())
  code      String    @unique
  createdBy String
  usedBy    String?   @unique
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  expiresAt DateTime
  isActive  Boolean   @default(true)
  creator   User      @relation("CreatedInvites", fields: [createdBy], references: [id], onDelete: Cascade)
  user      User?     @relation("UsedInvite", fields: [usedBy], references: [id])

  @@map("invite_codes")
}

model Peer {
  id           String   @id @default(cuid())
  peerId       String
  ip           String
  port         Int
  torrentId    String
  userId       String
  lastAnnounce DateTime @updatedAt
  client       String?
  left         BigInt   @default(0)
  downloaded   BigInt   @default(0)
  uploaded     BigInt   @default(0)
  torrent      Torrent  @relation(fields: [torrentId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([peerId, torrentId])
  @@index([torrentId])
  @@index([userId])
}

model TorrentCompletion {
  id          String   @id @default(cuid())
  torrentId   String
  userId      String
  peerId      String
  completedAt DateTime @default(now())
  uploaded    BigInt   // New: uploaded at completion
  downloaded  BigInt   // New: downloaded at completion
  torrent     Torrent  @relation(fields: [torrentId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([torrentId])
  @@index([userId])
  @@index([peerId])
}

model AnnounceRateLimit {
  id            String   @id @default(cuid())
  userId        String
  ip            String
  torrentId     String
  lastAnnounce  DateTime @default(now())
  announceCount Int      @default(1)
  torrent       Torrent  @relation(fields: [torrentId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, torrentId])
  @@index([ip])
  @@index([lastAnnounce])
  @@map("announce_rate_limits")
}

model Progress {
  id         String   @id @default(uuid())
  userId     String
  infoHash   String
  peerId     String
  mode       String   // 'download', 'upload', 'seeding', etc.
  uploaded   Json
  downloaded Json
  left       BigInt   @default(0)
  lastSeen   DateTime @default(now())
  updatedAt  DateTime
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([infoHash])
  @@index([lastSeen])
}

model HitAndRun {
  id              String   @id @default(uuid())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  torrent         Torrent  @relation(fields: [torrentId], references: [id], onDelete: Cascade)
  torrentId       String
  downloadedAt    DateTime @default(now())
  lastSeededAt    DateTime?
  totalSeedingTime Int     @default(0) // en minutos
  isHitAndRun     Boolean  @default(false)

  @@index([userId])
  @@index([torrentId])
  @@unique([userId, torrentId])
}

enum UserStatus {
  ACTIVE
  BANNED
  PENDING
}
