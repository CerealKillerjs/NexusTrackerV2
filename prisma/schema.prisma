// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  passkey       String    @unique @default(cuid()) // Unique passkey for announce URLs
  role          String    @default("user") // user, guest, admin, moderator
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  uploaded      BigInt    @default(0)
  downloaded    BigInt    @default(0)
  ratio         Float     @default(0)
  bonusPoints   Int       @default(0)
  accounts      Account[]
  sessions      Session[]
  torrents      Torrent[]
  comments      Comment[]
  bookmarks     Bookmark[]
  votes         Vote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Torrent {
  id          String   @id @default(cuid())
  infoHash    String   @unique
  name        String
  description String?
  type        String?
  source      String?
  binary      String   @db.Text
  uploadedBy  String
  downloads   Int      @default(0)
  size        BigInt
  files       Json
  image       String?  // Base64 encoded image
  nfo         String?  // NFO file content
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  freeleech   Boolean  @default(false)
  tags        String[]
  anonymous   Boolean  @default(false)
  user        User     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  comments    Comment[]
  bookmarks   Bookmark[]
  votes       Vote[]

  @@map("torrents")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  torrentId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  torrent   Torrent? @relation(fields: [torrentId], references: [id], onDelete: Cascade)
  votes     Vote[]

  @@map("comments")
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  torrentId String?
  commentId String?
  type      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  torrent   Torrent? @relation(fields: [torrentId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, torrentId, type])
  @@unique([userId, commentId, type])
  @@map("votes")
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  torrentId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  torrent   Torrent  @relation(fields: [torrentId], references: [id], onDelete: Cascade)

  @@unique([userId, torrentId])
  @@map("bookmarks")
}
