// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserStatus {
  ACTIVE
  BANNED
  PENDING
}

model User {
  id                  String               @id @default(cuid())
  username            String               @unique
  name                String?
  email               String               @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  passkey             String               @unique @default(cuid()) // Unique passkey for announce URLs
  role                String               @default("USER") // USER, GUEST, ADMIN, MODERATOR
  status              UserStatus           @default(ACTIVE)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  uploaded            BigInt               @default(0)
  downloaded          BigInt               @default(0)
  ratio               Float                @default(0)
  bonusPoints         Int                  @default(0)
  availableInvites    Int                  @default(0) // Number of available invitations
  accounts            Account[]
  sessions            Session[]
  torrents            Torrent[]
  comments            Comment[]
  bookmarks           Bookmark[]
  votes               Vote[]
  passwordResetTokens PasswordResetToken[]
  createdInvites      InviteCode[]         @relation("CreatedInvites")
  usedInvite          InviteCode?          @relation("UsedInvite")
  peers               Peer[]
  torrentCompletions  TorrentCompletion[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model Torrent {
  id          String     @id @default(cuid())
  infoHash    String     @unique
  name        String
  description String?
  type        String?
  source      String?
  binary      String     @db.Text
  uploadedBy  String
  downloads   Int        @default(0)
  size        BigInt
  files       Json
  image       String? // Base64 encoded image
  nfo         String? // NFO file content
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  freeleech   Boolean    @default(false)
  tags        String[]
  anonymous   Boolean    @default(false)
  user        User       @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  comments    Comment[]
  bookmarks   Bookmark[]
  votes       Vote[]
  peers       Peer[]
  torrentCompletions  TorrentCompletion[]

  @@map("torrents")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  torrentId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  torrent   Torrent? @relation(fields: [torrentId], references: [id], onDelete: Cascade)
  votes     Vote[]

  @@map("comments")
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  torrentId String?
  commentId String?
  type      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  torrent   Torrent? @relation(fields: [torrentId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, torrentId, type])
  @@unique([userId, commentId, type])
  @@map("votes")
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  torrentId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  torrent   Torrent  @relation(fields: [torrentId], references: [id], onDelete: Cascade)

  @@unique([userId, torrentId])
  @@map("bookmarks")
}

model Configuration {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt
}

// Configuration keys:
// - SMTP_HOST
// - SMTP_PORT
// - SMTP_USER
// - SMTP_PASS
// - SMTP_FROM
// - EMAIL_ENABLED
// - NEXT_PUBLIC_TRACKER_URL
// - SUPPORT_EMAIL (for support contact in notification emails)
// - REGISTRATION_MODE (open, invite_only, closed)
// - INVITE_EXPIRY_HOURS
// - MAX_INVITES_PER_USER

model InviteCode {
  id        String   @id @default(cuid())
  code      String   @unique
  createdBy String
  usedBy    String?  @unique
  usedAt    DateTime?
  createdAt DateTime @default(now())
  expiresAt DateTime
  isActive  Boolean  @default(true)
  
  creator   User     @relation("CreatedInvites", fields: [createdBy], references: [id], onDelete: Cascade)
  user      User?    @relation("UsedInvite", fields: [usedBy], references: [id], onDelete: SetNull)
  
  @@map("invite_codes")
}

model Peer {
  id           String   @id @default(cuid())
  peerId       String
  ip           String
  port         Int
  torrentId    String
  userId       String
  lastAnnounce DateTime @updatedAt
  client       String?
  left         BigInt   @default(0) // Amount left to download

  torrent      Torrent  @relation(fields: [torrentId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([peerId, torrentId])
  @@index([torrentId])
  @@index([userId])
}

model TorrentCompletion {
  id        String   @id @default(cuid())
  torrentId String
  userId    String
  peerId    String
  completedAt DateTime @default(now())

  torrent   Torrent  @relation(fields: [torrentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([torrentId])
  @@index([userId])
  @@index([peerId])
}
